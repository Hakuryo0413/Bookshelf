import {
  init_isMuiElement,
  isMuiElement_default
} from "./chunk-54MSUGMF.js";
import {
  capitalize_default,
  init_capitalize
} from "./chunk-NCVTQU4D.js";
import {
  init_base
} from "./chunk-QM4CG7DY.js";
import {
  init_styled,
  init_useThemeProps,
  styled_default,
  useThemeProps
} from "./chunk-TTLVJ47Q.js";
import {
  init_generateUtilityClass
} from "./chunk-JNKABULS.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  clsx_m_default,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_clsx_m,
  init_esm,
  init_extends,
  init_objectWithoutPropertiesLoose,
  require_prop_types
} from "./chunk-DAFBLP42.js";
import {
  require_jsx_runtime
} from "./chunk-DT77FM6J.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __esm,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@mui/material/esm/FormControl/FormControlContext.js
var React, FormControlContext, FormControlContext_default;
var init_FormControlContext = __esm({
  "node_modules/@mui/material/esm/FormControl/FormControlContext.js"() {
    React = __toESM(require_react());
    FormControlContext = React.createContext();
    if (true) {
      FormControlContext.displayName = "FormControlContext";
    }
    FormControlContext_default = FormControlContext;
  }
});

// node_modules/@mui/material/esm/FormControl/useFormControl.js
function useFormControl() {
  return React2.useContext(FormControlContext_default);
}
var React2;
var init_useFormControl = __esm({
  "node_modules/@mui/material/esm/FormControl/useFormControl.js"() {
    React2 = __toESM(require_react());
    init_FormControlContext();
  }
});

// node_modules/@mui/material/esm/FormControl/formControlClasses.js
function getFormControlUtilityClasses(slot) {
  return generateUtilityClass("MuiFormControl", slot);
}
var formControlClasses, formControlClasses_default;
var init_formControlClasses = __esm({
  "node_modules/@mui/material/esm/FormControl/formControlClasses.js"() {
    init_esm();
    init_generateUtilityClass();
    formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
    formControlClasses_default = formControlClasses;
  }
});

// node_modules/@mui/material/esm/InputBase/utils.js
function hasValue(value) {
  return value != null && !(Array.isArray(value) && value.length === 0);
}
function isFilled(obj, SSR = false) {
  return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
}
function isAdornedStart(obj) {
  return obj.startAdornment;
}
var init_utils = __esm({
  "node_modules/@mui/material/esm/InputBase/utils.js"() {
  }
});

// node_modules/@mui/material/esm/FormControl/FormControl.js
var React3, import_prop_types, import_jsx_runtime, _excluded, useUtilityClasses, FormControlRoot, FormControl, FormControl_default;
var init_FormControl = __esm({
  "node_modules/@mui/material/esm/FormControl/FormControl.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React3 = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx_m();
    init_base();
    init_useThemeProps();
    init_styled();
    init_utils();
    init_capitalize();
    init_isMuiElement();
    init_FormControlContext();
    init_formControlClasses();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    _excluded = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
    useUtilityClasses = (ownerState) => {
      const {
        classes,
        margin,
        fullWidth
      } = ownerState;
      const slots = {
        root: ["root", margin !== "none" && `margin${capitalize_default(margin)}`, fullWidth && "fullWidth"]
      };
      return composeClasses(slots, getFormControlUtilityClasses, classes);
    };
    FormControlRoot = styled_default("div", {
      name: "MuiFormControl",
      slot: "Root",
      overridesResolver: ({
        ownerState
      }, styles) => {
        return _extends({}, styles.root, styles[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
      }
    })(({
      ownerState
    }) => _extends({
      display: "inline-flex",
      flexDirection: "column",
      position: "relative",
      // Reset fieldset default style.
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: "top"
    }, ownerState.margin === "normal" && {
      marginTop: 16,
      marginBottom: 8
    }, ownerState.margin === "dense" && {
      marginTop: 8,
      marginBottom: 4
    }, ownerState.fullWidth && {
      width: "100%"
    }));
    FormControl = React3.forwardRef(function FormControl2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormControl"
      });
      const {
        children,
        className,
        color = "primary",
        component = "div",
        disabled = false,
        error = false,
        focused: visuallyFocused,
        fullWidth = false,
        hiddenLabel = false,
        margin = "none",
        required = false,
        size = "medium",
        variant = "outlined"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const ownerState = _extends({}, props, {
        color,
        component,
        disabled,
        error,
        fullWidth,
        hiddenLabel,
        margin,
        required,
        size,
        variant
      });
      const classes = useUtilityClasses(ownerState);
      const [adornedStart, setAdornedStart] = React3.useState(() => {
        let initialAdornedStart = false;
        if (children) {
          React3.Children.forEach(children, (child) => {
            if (!isMuiElement_default(child, ["Input", "Select"])) {
              return;
            }
            const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
            if (input && isAdornedStart(input.props)) {
              initialAdornedStart = true;
            }
          });
        }
        return initialAdornedStart;
      });
      const [filled, setFilled] = React3.useState(() => {
        let initialFilled = false;
        if (children) {
          React3.Children.forEach(children, (child) => {
            if (!isMuiElement_default(child, ["Input", "Select"])) {
              return;
            }
            if (isFilled(child.props, true)) {
              initialFilled = true;
            }
          });
        }
        return initialFilled;
      });
      const [focusedState, setFocused] = React3.useState(false);
      if (disabled && focusedState) {
        setFocused(false);
      }
      const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
      let registerEffect;
      if (true) {
        const registeredInput = React3.useRef(false);
        registerEffect = () => {
          if (registeredInput.current) {
            console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
          }
          registeredInput.current = true;
          return () => {
            registeredInput.current = false;
          };
        };
      }
      const childContext = React3.useMemo(() => {
        return {
          adornedStart,
          setAdornedStart,
          color,
          disabled,
          error,
          filled,
          focused,
          fullWidth,
          hiddenLabel,
          size,
          onBlur: () => {
            setFocused(false);
          },
          onEmpty: () => {
            setFilled(false);
          },
          onFilled: () => {
            setFilled(true);
          },
          onFocus: () => {
            setFocused(true);
          },
          registerEffect,
          required,
          variant
        };
      }, [adornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
      return (0, import_jsx_runtime.jsx)(FormControlContext_default.Provider, {
        value: childContext,
        children: (0, import_jsx_runtime.jsx)(FormControlRoot, _extends({
          as: component,
          ownerState,
          className: clsx_m_default(classes.root, className),
          ref
        }, other, {
          children
        }))
      });
    });
    true ? FormControl.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: import_prop_types.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types.default.object,
      /**
       * @ignore
       */
      className: import_prop_types.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'primary'
       */
      color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types.default.elementType,
      /**
       * If `true`, the label, input and helper text should be displayed in a disabled state.
       * @default false
       */
      disabled: import_prop_types.default.bool,
      /**
       * If `true`, the label is displayed in an error state.
       * @default false
       */
      error: import_prop_types.default.bool,
      /**
       * If `true`, the component is displayed in focused state.
       */
      focused: import_prop_types.default.bool,
      /**
       * If `true`, the component will take up the full width of its container.
       * @default false
       */
      fullWidth: import_prop_types.default.bool,
      /**
       * If `true`, the label is hidden.
       * This is used to increase density for a `FilledInput`.
       * Be sure to add `aria-label` to the `input` element.
       * @default false
       */
      hiddenLabel: import_prop_types.default.bool,
      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       * @default 'none'
       */
      margin: import_prop_types.default.oneOf(["dense", "none", "normal"]),
      /**
       * If `true`, the label will indicate that the `input` is required.
       * @default false
       */
      required: import_prop_types.default.bool,
      /**
       * The size of the component.
       * @default 'medium'
       */
      size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["medium", "small"]), import_prop_types.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
      /**
       * The variant to use.
       * @default 'outlined'
       */
      variant: import_prop_types.default.oneOf(["filled", "outlined", "standard"])
    } : void 0;
    FormControl_default = FormControl;
  }
});

// node_modules/@mui/material/esm/FormControl/index.js
var init_FormControl2 = __esm({
  "node_modules/@mui/material/esm/FormControl/index.js"() {
    init_FormControl();
    init_useFormControl();
    init_formControlClasses();
    init_formControlClasses();
  }
});

// node_modules/@mui/material/esm/FormControl/formControlState.js
function formControlState({
  props,
  states,
  muiFormControl
}) {
  return states.reduce((acc, state) => {
    acc[state] = props[state];
    if (muiFormControl) {
      if (typeof props[state] === "undefined") {
        acc[state] = muiFormControl[state];
      }
    }
    return acc;
  }, {});
}
var init_formControlState = __esm({
  "node_modules/@mui/material/esm/FormControl/formControlState.js"() {
  }
});

export {
  formControlState,
  init_formControlState,
  FormControlContext_default,
  init_FormControlContext,
  useFormControl,
  init_useFormControl,
  isFilled,
  init_utils,
  getFormControlUtilityClasses,
  formControlClasses_default,
  FormControl_default,
  init_FormControl2 as init_FormControl
};
//# sourceMappingURL=chunk-2HETSMH4.js.map
